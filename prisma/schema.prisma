generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resume {
  id     String @id @default(cuid())
  userId String

  firstName String?
  lastName  String?
  jobTitle  String?
  summary   String?

  phone   String?
  email   String?
  city    String?
  country String?

  colorHex    String  @default("#000000")
  borderStyle String  @default("squircle")
  imgUrl      String?

  title       String?
  description String?

  softSkills      String[]
  technicalSkills String[]

  hobbies      String[]
  achievements String[]
  languages    String[]

  linkedInUrl String?
  githubUrl   String?
  websiteUrl  String?

  workExperiences WorkExperience[]
  educations      Education[]
  projects        Project[]
  certifications  Certification[]
  references      Reference[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("resumes")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?

  resumeId String
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experience")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("education")
}

model Project {
  id          String    @id @default(cuid())
  title       String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  link        String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Reference {
  id    String  @id @default(cuid())
  name  String?
  phone String?
  email String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("references")
}

model Certification {
  id           String    @id @default(cuid())
  name         String?
  issuer       String?
  dateObtained DateTime?
  credentialId String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certifications")
}

model UserSub {
  id String @id @default(cuid())

  userId                  String   @unique
  stripeCustomeId         String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_subs")
}

model CoverLetter {
  id     String @id @default(cuid())
  userId String

  jobDescription String?
  title          String?
  body           String?

  firstName String?
  lastName  String?
  jobTitle  String?
  phone     String?
  email     String?

  resumeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cover_letter")
}
